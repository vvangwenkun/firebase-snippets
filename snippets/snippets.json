{
  "require firebase-functions": {
    "prefix": "refn",
    "body": "const functions = require('firebase-functions')$0"
  },
  "require firebase-functions/v2": {
    "prefix": "refnv2",
    "body": "const functions = require('firebase-functions/v2')$0"
  },
  "require firebase-admin/firestore": {
    "prefix": "refs",
    "body": "const firestore = require('firebase-admin/firestore')$0"
  },
  "require { getFunctions }": {
    "prefix": "regfn",
    "body": "const { getFunctions } = require('firebase-admin/functions')$0"
  },
  "require firebase-functions-test": {
    "prefix": "refntest",
    "body": "const { wrap, mockConfig } = require('firebase-functions-test')($0)"
  },
  "require { getStorage }": {
    "prefix": "restg",
    "body": "const { getStorage } = require('firebase-admin/storage')"
  },
  "require @google-cloud/pubsub": {
    "prefix": "reps",
    "body": "const { PubSub } = require('@google-cloud/pubsub')$0"
  },
  "httpsOnCall": {
    "prefix": "hoc",
    "body": [
      "exports.${1:funcName} = functions.https",
      "  .onCall(async (data, context) => {",
      "    const uid = context?.auth?.uid",
      "    const email = context?.auth?.token?.email",
      "    $0",
      "    return { code: 0, message: 'success' }",
      "  })"
    ],
    "description": "create an HTTPs callable function"
  },
  "httpsOnCallV2": {
    "prefix": "hocv2",
    "body": [
      "exports.${1:funcName} = functions.https",
      "  .onCall(async (req) => {",
      "    const uid = req?.auth?.uid",     
      "    const email = req?.auth?.token?.email",
      "    $0",
      "    return { code: 0, message: 'success' }",
      "  })"
    ],
    "description": "create an HTTPs callable function"
  },
  "httpsOnRequest": {
    "prefix": "hoq",
    "body": [
      "exports.${1:funcName} = functions.https",
      "  .onRequest(async (req, res) => {",
      "    $0",
      "    return res.status(200).send({ code: 0, message: 'success' })",
      "  })"
    ],
    "description": "create a functions that handles HTTP events"
  },
  "httpsOnRequestV2": {
    "prefix": "hoqv2",
    "body": [
      "exports.${1:funcName} = functions.https",
      "  .onRequest(",
      "    { cors: [], timeoutSeconds: 1200 },",
      "    async (req, res) => {",
      "      $0",
      "      return res.status(200).send({ code: 0, message: 'success' })",
      "    }",
      "  )"
    ],
    "description": "create a functions that handles HTTP events"
  },
  "taskQueueFunctions":{
    "prefix": "tqdp",
    "body": [
      "exports.${1:funcName} = functions",
      "  .runWith({})",
      "  .tasks.taskQueue({",
      "    retryConfig: {",
      "      maxAttempts: 5,",
      "      minBackoffSeconds: 60,",
      "    },",
      "    rateLimits: {",
      "      maxConcurrentDispatches: 10,",
      "    },",
      "  })",
      "  .onDispatch(async (data) => {",
      "    $0",
      "  })"
    ],
    "description": "create a task queue functions"
  },
  "taskQueueFunctionsV2":{
    "prefix": "tqdpv2",
    "body": [
      "exports.${1:funcName} = functions",
      "  .tasks.onTaskDispatched(",
      "    {",
      "      retryConfig: {",
      "        maxAttempts: 5,",
      "        minBackoffSeconds: 60,",
      "      },",
      "      rateLimits: {",
      "        maxConcurrentDispatches: 10,",
      "      },",
      "    },",
      "    async (req) => {",
      "      $0",
      "    }",
      "  )"
    ],
    "description": "create a task queue functions"
  },
  "taskQueueReference": {
    "prefix": "tqref",
    "body": "const queue = getFunctions().taskQueue('taskQueueFunctionName')",
    "description": "create a reference to a TaskQueue for a given function name"
  },
  "scheduledFunctions":{
    "prefix": "schrun",
    "body": [
      "exports.${1:funcName} = functions.pubsub",
      "  .schedule('every 5 minutes')",
      "  .timeZone('America/New_York')",
      "  .onRun(async (context) => {",
      "    $0",
      "  })"
    ],
    "description": "create a scheduled functions"
  },
  "scheduledFunctionsV2":{
    "prefix": "schrunv2",
    "body": [
      "exports.${1:funcName} = functions.scheduler",
      "  .onSchedule('every day 00:00', async (event) => {",
      "    $0",
      "  })"
    ],
    "description": "create a scheduled functions"
  },
  "firestoreOnDocumentCreate":{
    "prefix": "fsodc",
    "body": [
      "exports.${1:funcName} = functions.firestore",
      "  .document('users/{userId}')",
      "  .onCreate(async (snapshot, context) => {",
      "    const { params, eventId, timestamp } = context",
      "    const doc = snapshot.data()",
      "    $0",
      "  })"
    ],
    "description": "define a handler for cloud Firestore create event"
  },
  "firestoreOnDocumentCreateV2":{
    "prefix": "fsodcv2",
    "body": [
      "exports.${1:funcName} = functions.firestore",
      "  .onDocumentCreated('users/{userId}', (event) => {",
      "    const { data: snapshot, params, id: eventId, time: timestamp } = event",
      "    const data = snapshot.data()",
      "    $0",
      "  })"
    ],
    "description": "define a handler for cloud Firestore create event"
  },
  "firestoreOnDocumentUpdate":{
    "prefix": "fsodu",
    "body": [
      "exports.${1:funcName} = functions.firestore",
      "  .document('users/{userId}')",
      "  .onUpdate(async (change, context) => {",
      "    const { params, eventId, timestamp } = context",
      "    const before = change.before.data()",
      "    const after = change.after.data()",
      "    $0",
      "  })"
    ],
    "description": "define a handler for cloud Firestore update event"
  },
  "firestoreOnDocumentUpdateV2":{
    "prefix": "fsoduv2",
    "body": [
      "exports.${1:funcName} = functions.firestore",
      "  .onDocumentUpdated('users/{userId}', async (event) => {",
      "    const { data, params, id: eventId, time: timestamp } = event",
      "    const before = data.before.data()",
      "    const after = data.after.data()",
      "    $0",
      "  })"
    ],
    "description": "define a handler for cloud Firestore update event"
  },
  "firestoreOnDocumentDelete":{
    "prefix": "fsodd",
    "body": [
      "exports.${1:funcName} = functions.firestore",
      "  .document('users/{userId}')",
      "  .onDelete(async (snapshot, context) => {",
      "    const { params, eventId, timestamp } = context",
      "    const doc = snapshot.data()",
      "    $0",
      "  })"
    ],
    "description": "define a handler for cloud Firestore delete event"
  },
  "firestoreOnDocumentDeleteV2":{
    "prefix": "fsoddv2",
    "body": [
      "exports.${1:funcName} = functions.firestore",
      "  .onDocumentDeleted('users/{userId}', async (event) => {",
      "    const { data: snapshot, params, id: eventId, time: timestamp } = event",
      "    const data = snapshot.data()",
      "    $0",
      "  })"
    ],
    "description": "define a handler for cloud Firestore delete event"
  },
  "firestoreOnDocumentWrite":{
    "prefix": "fsodw",
    "body": [
      "exports.${1:funcName} = functions.firestore",
      "  .document('users/{userId}')",
      "  .onWrite(async (change, context) => {",
      "    const { params, eventId, eventType, timestamp } = context",
      "    const before = change.before.exists ? change.before.data() : null",
      "    const after = change.after.exists ? change.after.data() : null",
      "    $0",
      "  })"
    ],
    "description": "define a handler for cloud Firestore change event"
  },
  "firestoreOnDocumentWriteV2":{
    "prefix": "fsodwv2",
    "body": [
      "exports.${1:funcName} = functions.firestore",
      "  .onDocumentWritten('users/{userId}', async (event) => {",
      "    const { data, params, id: eventId, time: timestamp } = event",
      "    const before = data.before.exists ? data.before.data() : null",
      "    const after = data.after.exists ? data.after.data() : null",
      "    $0",
      "  })"
    ],
    "description": "define a handler for cloud Firestore change event"
  },
  "realtimeDatabaseOnDataCreate":{
    "prefix": "rtdbodc",
    "body": [
      "exports.${1:funcName} = functions.database",
      "  .ref('/foo/{bar}')",
      "  .onCreate(async (snapshot, context) => {",
      "    const { params, eventId, timestamp } = context",
      "    const value = snapshot.val()",
      "    $0",
      "  })"
    ],
    "description": "define a handler for Realtime Database create event"
  },
  "realtimeDatabaseOnDataCreateV2":{
    "prefix": "rtdbodcv2",
    "body": [
      "exports.${1:funcName} = functions.database",
      "  .onValueCreated('/foo/{bar}', async (event) => {",
      "    const { params, id: eventId, time: timestamp } = event",
      "    const value = event.data.val()",
      "    $0",
      "  })"
    ],
    "description": "define a handler for Realtime Database create event"
  },
  "realtimeDatabaseOnDataUpdate":{
    "prefix": "rtdbodu",
    "body": [
      "exports.${1:funcName} = functions.database",
      "  .ref('/foo/{bar}')",
      "  .onUpdate(async (change, context) => {",
      "    const { params, eventId, timestamp } = context",
      "    const before = change.before.val()",
      "    const after = change.after.val()",
      "    $0",
      "  })"
    ],
    "description": "define a handler for Realtime Database update event"
  },
  "realtimeDatabaseOnDataUpdateV2":{
    "prefix": "rtdboduv2",
    "body": [
      "exports.${1:funcName} = functions.database",
      "  .onValueUpdated('/foo/{bar}', async (event) => {",
      "    const { data, params, id: eventId, time: timestamp } = event",
      "    const before = data.before.val()",
      "    const after = data.after.val()",
      "    $0",
      "  })"
    ],
    "description": "define a handler for Realtime Database update event"
  },
  "realtimeDatabaseOnDataDelete":{
    "prefix": "rtdbodd",
    "body": [
      "exports.${1:funcName} = functions.database",
      "  .ref('/foo/{bar}')",
      "  .onDelete(async (snapshot, context) => {",
      "    const { params, eventId, timestamp } = context",
      "    const value = snapshot.val()",
      "    $0",
      "  })"
    ],
    "description": "define a handler for Realtime Database delete event"
  },
  "realtimeDatabaseOnDataDeleteV2":{
    "prefix": "rtdboddv2",
    "body": [
      "exports.${1:funcName} = functions.database",
      "  .onValueDeleted('/foo/{bar}', async (event) => {",
      "    const { params, id: eventId, time: timestamp } = event",
      "    const value = event.data.val()",
      "    $0",
      "  })"
    ],
    "description": "define a handler for Realtime Database delete event"
  },
  "realtimeDatabaseOnDataWrite":{
    "prefix": "rtdbodw",
    "body": [
      "exports.${1:funcName} = functions.database",
      "  .ref('/foo/{bar}')",
      "  .onWrite(async (change, context) => {",
      "    const { params, eventId, eventType, timestamp } = context",
      "    const before = change.before.exists() ? change.before.val() : null",
      "    const after = change.after.exists() ? change.after.val() : null",
      "    $0",
      "  })"
    ],
    "description": "define a handler for Realtime Database change event"
  },
  "realtimeDatabaseOnDataWriteV2":{
    "prefix": "rtdbodwv2",
    "body": [
      "exports.${1:funcName} = functions.database",
      "  .onValueWritten('/foo/{bar}', async (event) => {",
      "    const { data, params, id: eventId, time: timestamp } = event",
      "    const before = data.before.exists() ? data.before.val() : null",
      "    const after = data.after.exists() ? data.after.val() : null",
      "    $0",
      "  })"
    ],
    "description": "define a handler for Realtime Database change event"
  },
  "remoteConfigUpdate":{
    "prefix": "rcou",
    "body": [
      "exports.${1:funcName} = functions.remoteConfig",
      "  .onUpdate(async (versionMetadata, context) => {",
      "    const currentVersion = versionMetadata.versionNumber",
      "    $0",
      "  })"
    ],
    "description": "define a handler for Remote Config events"
  },
  "remoteConfigUpdateV2":{
    "prefix": "rcouv2",
    "body": [
      "exports.${1:funcName} = functions.remoteConfig",
      "  .onConfigUpdated(async (event) => {",
      "    const currentVersion = event.data.versionNumber",
      "    $0",
      "  })"
    ],
    "description": "define a handler for Remote Config events"
  },
  "pubSubFunctions":{
    "prefix": "msgop",
    "body": [
      "exports.${1:funcName} = functions.pubsub",
      "  .topic('topicName')",
      "  .onPublish(async (message, context) => {",
      "    const { eventId, timestamp } = context",
      "    const messageBoy = message.data ? Buffer.from(message.data, 'base64').toString() : null",
      "    $0",
      "  })"
    ],
    "description": "define a handler for Pub/Sub message is sent to specific topic"
  },
  "pubSubFunctionsV2":{
    "prefix": "msgopv2",
    "body": [
      "exports.${1:funcName} = functions.pubsub",
      "  .onMessagePublished('topicName', async (event) => {",
      "    const { data: { message }, id: eventId, time: timestamp } = event",
      "    const messageBoy = message.data ? Buffer.from(message.data, 'base64').toString() : null",
      "    $0",
      "  })"
    ],
    "description": "define a handler for Pub/Sub message is sent to specific topic"
  },
  "uploadObjectToBucket":{
    "prefix": "soupl",
    "body": [
      "getStorage().bucket().upload('filePath', { destination: 'destFileName' })",
      "  .then((res) => {",
      "    $0",
      "  })",
      "  .catch((err) => {",
      "    $1",
      "  })"
    ],
    "description": "upload an object to a bucket"
  },
  "downloadObjectFromBucket":{
    "prefix": "sodown",
    "body": [
      "getStorage().bucket().file().download({ destination: 'destFileName' })",
      "  .then((res) => {",
      "    $0",
      "  })",
      "  .catch((err) => {",
      "    $1",
      "  })"
    ],
    "description": "download an object from a bucket"
  },
  "storageObjectOnArchive":{
    "prefix": "sooa",
    "body": [
      "exports.${1:funcName} = functions.storage",
      "  .bucket('bucketName')",
      "  .object()",
      "  .onArchive(async(object, context) => {",
      "    const { bucket: fileBucket, name: filePath, contentType } = object",
      "    $0",
      "  })"
    ],
    "description": "define a handler for bucket object archive event"
  },
  "storageObjectOnArchiveV2":{
    "prefix": "sooav2",
    "body": [
      "exports.${1:funcName} = functions.storage",
      "  .onObjectArchived({ bucket: 'bucketName', }, async(event) => {",
      "    const { bucket: fileBucket, name: filePath, contentType } = event.data",
      "    $0",
      "  })"
    ],
    "description": "define a handler for bucket object archive event"
  },
  "bucketObjectOnDelete":{
    "prefix": "sood",
    "body": [
      "exports.${1:funcName} = functions.storage",
      "  .bucket('bucketName')",
      "  .object()",
      "  .onDelete(async(object, context) => {",
      "    const { bucket: fileBucket, name: filePath, contentType } = object",
      "    $0",
      "  })"
    ],
    "description": "define a handler for bucket object delete event"
  },
  "storageObjectOnDeleteV2":{
    "prefix": "soodv2",
    "body": [
      "exports.${1:funcName} = functions.storage",
      "  .onObjectDeleted({ bucket: 'bucketName', }, async(event) => {",
      "    const { bucket: fileBucket, name: filePath, contentType } = event.data",
      "    $0",
      "  })"
    ],
    "description": "define a handler for bucket object delete event"
  },
  "storageObjectFinalized":{
    "prefix": "soof",
    "body": [
      "exports.${1:funcName} = functions.storage",
      "  .bucket('bucketName')",
      "  .object()",
      "  .onFinalize(async(object, context) => {",
      "    const { bucket: fileBucket, name: filePath, contentType } = object",
      "    $0",
      "  })"
    ],
    "description": "define a handler for bucket object finalize event"
  },
  "storageObjectFinalizedV2":{
    "prefix": "soofv2",
    "body": [
      "exports.${1:funcName} = functions.storage",
      "  .onObjectFinalized({ bucket: 'bucketName', }, async(event) => {",
      "    const { bucket: fileBucket, name: filePath, contentType } = event.data",
      "    $0",
      "  })"
    ],
    "description": "define a handler for bucket object finalize event"
  },
  "storageObjectMetadataUpdated":{
    "prefix": "somu",
    "body": [
      "exports.${1:funcName} = functions.storage",
      "  .bucket('bucketName')",
      "  .object()",
      "  .onMetadataUpdate(async(object, context) => {",
      "    const { bucket: fileBucket, name: filePath, contentType } = object",
      "    $0",
      "  })"
    ],
    "description": "define a handler for bucket object metadata update event"
  },
  "storageObjectMetadataUpdatedV2":{
    "prefix": "somuv2",
    "body": [
      "exports.${1:funcName} = functions.storage",
      "  .onObjectMetadataUpdated({ bucket: 'bucketName', }, async(event) => {",
      "    const { bucket: fileBucket, name: filePath, contentType } = event.data",
      "    $0",
      "  })"
    ],
    "description": "define a handler for storage object metadata update event"
  },
  "publishMessage":{
    "prefix": "pubmsg",
    "body": [
      "new PubSub({ projectId: '${1:projectId}' })",
      "  .topic('${2topicName}')",
      "  .publishMessage({",
      "    $0",
      "  })"
    ],
    "description": "Publish the provided message."
  },
  "subscribeMessage":{
    "prefix": "submsg",
    "body": [
      "new PubSub({ projectId: '${1:projectId}' })",
      "  .topic('${2:topicName}')",
      "  .subscription('${3:subscriptionName}')",
      "  .on('message', async (message) => {",
      "    const messageBoy = message.data ? Buffer.from(message.data, 'base64').toString() : null",
      "    $0",
      "  })"
    ],
    "description": "Register a listener for `message` events."
  }
}
